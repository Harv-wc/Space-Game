using System;

namespace SpaceGame
{
    class Program
    {
        static void Main(string[] args)
        {

            // inside the for loops: variable "i" is used for the row position. "j" is used for the column position.
            Random rand = new Random();
            int score = 0;
            int coinPos = 0;
            int size = 11; // size based on difficulty
            string[,] game = new string[size, size];
            int playerPos = size - (size / 2);
            int oldPosition = playerPos;
            int gameCounter = 0;
            int playerPosX = size - 1;
            int difficultyLength = new int();
            const int quitVariable = 3;
            int selector = 0;
            bool userInput = false;

            // BUILD GAME BOARD //
            // adding empty space inside game board
            for (int i = 1; i < game.GetLength(0); i++) // Filling in each row    //filling in array
            {for (int j = 1; j < game.GetLength(1); j++) // Filling in each column for the row it's in
                {game[i, j] = " ";}}
            //Building left border
            for (int i = 0; i < size; i++)      
            {game[i, 0] = "|";}
            //Building right border
            for (int i = 0; i < size; i++)      
            {game[i, size - 1] = "|";}
            //Building top border
            for (int j = 0; j < size; j++)      
            {game[0, j] = "_";}
            //Player starting position
            game[size - 1, playerPos] = "V";


            //////////////////////////////////////
            // Change the number of menu items here
            
           

            while (selector != quitVariable)
            {
                Console.Clear();
                DrawMenu();
                userInput = int.TryParse(Console.ReadLine(), out selector);
                if (userInput)
                {
                    switch (selector)
                    {
                        case 1:
                            // EASY MODE
                            //size = 8;
                            selector = 3;
                            difficultyLength = 50;
                            break;
                        case 2:
                            //HARD MODE
                            //size = 11;
                            selector = 3;
                            difficultyLength = 100;
                            break;
                        case 3:
                            //QUIT GAME
                            userInput = false;
                            break;
                        //  If more cases, add here. If so, go to the top and change maxMenuItems amount the total cases 
                        default:
                            break;
                    }
                }
            }
            while (userInput == true)
            {
                //game loop -- based on menu option
                while (gameCounter <= difficultyLength)       
            {
                //clears first line of old coins
                for (int j = 1; j < (game.GetLength(0) - 1); j++)   
                {   if (game[1, j] == "o")
                        {game[1, j] = " ";}
                }
                //creates new coin
                coinPos = rand.Next(1, size - 2);
                game[1, coinPos] = "o";            
                // print2DArry draws the game board to screen
                Print2DArray(game,score);
                // taking user input here then updating game.
                ConsoleKeyInfo awd = new ConsoleKeyInfo();
                awd = Console.ReadKey();
                // Checks user input
                bool breakOut = true;
                while (breakOut) {
                    switch (awd.Key)
                    {
                        case ConsoleKey.A: //Move left
                            playerPos -= 1;
                            oldPosition = playerPos + 1;
                            game[playerPosX, oldPosition] = " ";
                            game[playerPosX, playerPos] = "V";
                            if (game[playerPosX - 1, playerPos] == "o")
                            {
                                score++;
                            }
                            copyRows(size, game);
                            Console.Clear();
                            breakOut = false;
                            break;
                        case ConsoleKey.D: //Move right
                            playerPos += 1;
                            oldPosition = playerPos - 1;
                            game[playerPosX, oldPosition] = " ";
                            game[playerPosX, playerPos] = "V";
                            if (game[playerPosX - 1, playerPos] == "o")
                            {
                                score++;
                            }
                            copyRows(size, game);
                            Console.Clear();
                            breakOut = false;
                            break;
                        case ConsoleKey.W: //stay in place (move forward)
                            if (game[playerPosX - 1, playerPos] == "o")
                            {
                                score++;
                            }
                            copyRows(size, game);
                            Console.Clear();
                            breakOut = false;
                            break;
                        default:
                            break;

                    } }
                gameCounter++;
            }
            //game ends
            Console.WriteLine($"Game Over. Your Score: {score}\nPress any key to exit.");
                userInput = false;
            Console.ReadLine();

            }
        }
        private static void DrawMenu()
        {
            Console.WriteLine(" Welcome To STAR COLLECTOR ");
            Console.WriteLine("****************************");
            Console.WriteLine(" Select Your Difficulty ");
            Console.WriteLine("****************************");
            Console.WriteLine(" 1. REGULAR");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(" 2. HARD");
            Console.ResetColor();
            Console.WriteLine(" 3. Quit Game");
            Console.WriteLine("****************************");
        }
    

        public static void Print2DArray<T>(T[,] matrix, int score)
        {
            Console.WriteLine($"Score: {score}");
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    Console.Write(matrix[i, j]);
                }
                Console.WriteLine();
            }
        }

        static void copyRows(int size, string[,] game)     //moves coins from top to bottom
        {
            for (int x = 2; x < size; x++)
            {
                int rowAbove = x + 1;

                for (int j = 1; j < (game.GetLength(0) - 1); j++)
                {
                    if (rowAbove == size)   //keeps rows from copying the top border
                    {
                        break;
                    }
                    game[size - x, j] = game[size - rowAbove, j];   //copies top row to bottom row

                }
            }
        }
    }
}
